// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mq_proto.proto

#include "mq_proto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bitmq {
PROTOBUF_CONSTEXPR openChannelRequest::openChannelRequest(
    ::_pbi::ConstantInitialized)
  : rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct openChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR openChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~openChannelRequestDefaultTypeInternal() {}
  union {
    openChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 openChannelRequestDefaultTypeInternal _openChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR closeChannelRequest::closeChannelRequest(
    ::_pbi::ConstantInitialized)
  : rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct closeChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR closeChannelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~closeChannelRequestDefaultTypeInternal() {}
  union {
    closeChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 closeChannelRequestDefaultTypeInternal _closeChannelRequest_default_instance_;
PROTOBUF_CONSTEXPR declareExchangeRequest_ArgsEntry_DoNotUse::declareExchangeRequest_ArgsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct declareExchangeRequest_ArgsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR declareExchangeRequest_ArgsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~declareExchangeRequest_ArgsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    declareExchangeRequest_ArgsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 declareExchangeRequest_ArgsEntry_DoNotUseDefaultTypeInternal _declareExchangeRequest_ArgsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR declareExchangeRequest::declareExchangeRequest(
    ::_pbi::ConstantInitialized)
  : args_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , exchange_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , exchange_type_(0)

  , durable_(false)
  , auto_delete_(false){}
struct declareExchangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR declareExchangeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~declareExchangeRequestDefaultTypeInternal() {}
  union {
    declareExchangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 declareExchangeRequestDefaultTypeInternal _declareExchangeRequest_default_instance_;
PROTOBUF_CONSTEXPR deleteExchangeRequest::deleteExchangeRequest(
    ::_pbi::ConstantInitialized)
  : rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , exchange_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct deleteExchangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR deleteExchangeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~deleteExchangeRequestDefaultTypeInternal() {}
  union {
    deleteExchangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 deleteExchangeRequestDefaultTypeInternal _deleteExchangeRequest_default_instance_;
PROTOBUF_CONSTEXPR declareQueueRequest_ArgsEntry_DoNotUse::declareQueueRequest_ArgsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct declareQueueRequest_ArgsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR declareQueueRequest_ArgsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~declareQueueRequest_ArgsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    declareQueueRequest_ArgsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 declareQueueRequest_ArgsEntry_DoNotUseDefaultTypeInternal _declareQueueRequest_ArgsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR declareQueueRequest::declareQueueRequest(
    ::_pbi::ConstantInitialized)
  : args_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , queue_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , exclusive_(false)
  , durable_(false)
  , auto_delete_(false){}
struct declareQueueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR declareQueueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~declareQueueRequestDefaultTypeInternal() {}
  union {
    declareQueueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 declareQueueRequestDefaultTypeInternal _declareQueueRequest_default_instance_;
PROTOBUF_CONSTEXPR deleteQueueRequest::deleteQueueRequest(
    ::_pbi::ConstantInitialized)
  : rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , queue_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct deleteQueueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR deleteQueueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~deleteQueueRequestDefaultTypeInternal() {}
  union {
    deleteQueueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 deleteQueueRequestDefaultTypeInternal _deleteQueueRequest_default_instance_;
PROTOBUF_CONSTEXPR queueBindRequest::queueBindRequest(
    ::_pbi::ConstantInitialized)
  : rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , exchange_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , queue_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , binding_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct queueBindRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR queueBindRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~queueBindRequestDefaultTypeInternal() {}
  union {
    queueBindRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 queueBindRequestDefaultTypeInternal _queueBindRequest_default_instance_;
PROTOBUF_CONSTEXPR queueUnBindRequest::queueUnBindRequest(
    ::_pbi::ConstantInitialized)
  : rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , exchange_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , queue_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct queueUnBindRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR queueUnBindRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~queueUnBindRequestDefaultTypeInternal() {}
  union {
    queueUnBindRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 queueUnBindRequestDefaultTypeInternal _queueUnBindRequest_default_instance_;
PROTOBUF_CONSTEXPR basicPublishRequest::basicPublishRequest(
    ::_pbi::ConstantInitialized)
  : rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , exchange_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , body_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , properties_(nullptr){}
struct basicPublishRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR basicPublishRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~basicPublishRequestDefaultTypeInternal() {}
  union {
    basicPublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 basicPublishRequestDefaultTypeInternal _basicPublishRequest_default_instance_;
PROTOBUF_CONSTEXPR basicAckRequest::basicAckRequest(
    ::_pbi::ConstantInitialized)
  : rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , queue_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct basicAckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR basicAckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~basicAckRequestDefaultTypeInternal() {}
  union {
    basicAckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 basicAckRequestDefaultTypeInternal _basicAckRequest_default_instance_;
PROTOBUF_CONSTEXPR basicConsumeRequest::basicConsumeRequest(
    ::_pbi::ConstantInitialized)
  : rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , consumer_tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , queue_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , auto_ack_(false){}
struct basicConsumeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR basicConsumeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~basicConsumeRequestDefaultTypeInternal() {}
  union {
    basicConsumeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 basicConsumeRequestDefaultTypeInternal _basicConsumeRequest_default_instance_;
PROTOBUF_CONSTEXPR basicCancelRequest::basicCancelRequest(
    ::_pbi::ConstantInitialized)
  : rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , consumer_tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , queue_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct basicCancelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR basicCancelRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~basicCancelRequestDefaultTypeInternal() {}
  union {
    basicCancelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 basicCancelRequestDefaultTypeInternal _basicCancelRequest_default_instance_;
PROTOBUF_CONSTEXPR basicConsumeResponse::basicConsumeResponse(
    ::_pbi::ConstantInitialized)
  : cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , consumer_tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , body_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , properties_(nullptr){}
struct basicConsumeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR basicConsumeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~basicConsumeResponseDefaultTypeInternal() {}
  union {
    basicConsumeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 basicConsumeResponseDefaultTypeInternal _basicConsumeResponse_default_instance_;
PROTOBUF_CONSTEXPR basicCommonResponse::basicCommonResponse(
    ::_pbi::ConstantInitialized)
  : rid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ok_(false){}
struct basicCommonResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR basicCommonResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~basicCommonResponseDefaultTypeInternal() {}
  union {
    basicCommonResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 basicCommonResponseDefaultTypeInternal _basicCommonResponse_default_instance_;
}  // namespace bitmq
static ::_pb::Metadata file_level_metadata_mq_5fproto_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_mq_5fproto_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mq_5fproto_2eproto = nullptr;

const uint32_t TableStruct_mq_5fproto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::openChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::openChannelRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::openChannelRequest, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::closeChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::closeChannelRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::closeChannelRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest_ArgsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest_ArgsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest_ArgsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest_ArgsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest, exchange_name_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest, exchange_type_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest, durable_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest, auto_delete_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareExchangeRequest, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::deleteExchangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::deleteExchangeRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::deleteExchangeRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::deleteExchangeRequest, exchange_name_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest_ArgsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest_ArgsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest_ArgsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest_ArgsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest, queue_name_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest, exclusive_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest, durable_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest, auto_delete_),
  PROTOBUF_FIELD_OFFSET(::bitmq::declareQueueRequest, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::deleteQueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::deleteQueueRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::deleteQueueRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::deleteQueueRequest, queue_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::queueBindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::queueBindRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::queueBindRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::queueBindRequest, exchange_name_),
  PROTOBUF_FIELD_OFFSET(::bitmq::queueBindRequest, queue_name_),
  PROTOBUF_FIELD_OFFSET(::bitmq::queueBindRequest, binding_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::queueUnBindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::queueUnBindRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::queueUnBindRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::queueUnBindRequest, exchange_name_),
  PROTOBUF_FIELD_OFFSET(::bitmq::queueUnBindRequest, queue_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicPublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicPublishRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicPublishRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicPublishRequest, exchange_name_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicPublishRequest, body_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicPublishRequest, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicAckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicAckRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicAckRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicAckRequest, queue_name_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicAckRequest, message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicConsumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicConsumeRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicConsumeRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicConsumeRequest, consumer_tag_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicConsumeRequest, queue_name_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicConsumeRequest, auto_ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicCancelRequest, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicCancelRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicCancelRequest, consumer_tag_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicCancelRequest, queue_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicConsumeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicConsumeResponse, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicConsumeResponse, consumer_tag_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicConsumeResponse, body_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicConsumeResponse, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicCommonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bitmq::basicCommonResponse, rid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicCommonResponse, cid_),
  PROTOBUF_FIELD_OFFSET(::bitmq::basicCommonResponse, ok_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bitmq::openChannelRequest)},
  { 8, -1, -1, sizeof(::bitmq::closeChannelRequest)},
  { 16, 24, -1, sizeof(::bitmq::declareExchangeRequest_ArgsEntry_DoNotUse)},
  { 26, -1, -1, sizeof(::bitmq::declareExchangeRequest)},
  { 39, -1, -1, sizeof(::bitmq::deleteExchangeRequest)},
  { 48, 56, -1, sizeof(::bitmq::declareQueueRequest_ArgsEntry_DoNotUse)},
  { 58, -1, -1, sizeof(::bitmq::declareQueueRequest)},
  { 71, -1, -1, sizeof(::bitmq::deleteQueueRequest)},
  { 80, -1, -1, sizeof(::bitmq::queueBindRequest)},
  { 91, -1, -1, sizeof(::bitmq::queueUnBindRequest)},
  { 101, -1, -1, sizeof(::bitmq::basicPublishRequest)},
  { 112, -1, -1, sizeof(::bitmq::basicAckRequest)},
  { 122, -1, -1, sizeof(::bitmq::basicConsumeRequest)},
  { 133, -1, -1, sizeof(::bitmq::basicCancelRequest)},
  { 143, -1, -1, sizeof(::bitmq::basicConsumeResponse)},
  { 153, -1, -1, sizeof(::bitmq::basicCommonResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bitmq::_openChannelRequest_default_instance_._instance,
  &::bitmq::_closeChannelRequest_default_instance_._instance,
  &::bitmq::_declareExchangeRequest_ArgsEntry_DoNotUse_default_instance_._instance,
  &::bitmq::_declareExchangeRequest_default_instance_._instance,
  &::bitmq::_deleteExchangeRequest_default_instance_._instance,
  &::bitmq::_declareQueueRequest_ArgsEntry_DoNotUse_default_instance_._instance,
  &::bitmq::_declareQueueRequest_default_instance_._instance,
  &::bitmq::_deleteQueueRequest_default_instance_._instance,
  &::bitmq::_queueBindRequest_default_instance_._instance,
  &::bitmq::_queueUnBindRequest_default_instance_._instance,
  &::bitmq::_basicPublishRequest_default_instance_._instance,
  &::bitmq::_basicAckRequest_default_instance_._instance,
  &::bitmq::_basicConsumeRequest_default_instance_._instance,
  &::bitmq::_basicCancelRequest_default_instance_._instance,
  &::bitmq::_basicConsumeResponse_default_instance_._instance,
  &::bitmq::_basicCommonResponse_default_instance_._instance,
};

const char descriptor_table_protodef_mq_5fproto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016mq_proto.proto\022\005bitmq\032\014mq_msg.proto\".\n"
  "\022openChannelRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030"
  "\002 \001(\t\"/\n\023closeChannelRequest\022\013\n\003rid\030\001 \001("
  "\t\022\013\n\003cid\030\002 \001(\t\"\377\001\n\026declareExchangeReques"
  "t\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\025\n\rexchange_"
  "name\030\003 \001(\t\022*\n\rexchange_type\030\004 \001(\0162\023.bitm"
  "q.ExchangeType\022\017\n\007durable\030\005 \001(\010\022\023\n\013auto_"
  "delete\030\006 \001(\010\0225\n\004args\030\007 \003(\0132\'.bitmq.decla"
  "reExchangeRequest.ArgsEntry\032+\n\tArgsEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"H\n\025dele"
  "teExchangeRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002 "
  "\001(\t\022\025\n\rexchange_name\030\003 \001(\t\"\335\001\n\023declareQu"
  "eueRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\022\n\n"
  "queue_name\030\003 \001(\t\022\021\n\texclusive\030\004 \001(\010\022\017\n\007d"
  "urable\030\005 \001(\010\022\023\n\013auto_delete\030\006 \001(\010\0222\n\004arg"
  "s\030\007 \003(\0132$.bitmq.declareQueueRequest.Args"
  "Entry\032+\n\tArgsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"B\n\022deleteQueueRequest\022\013\n\003rid\030"
  "\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\022\n\nqueue_name\030\003 \001(\t\"l"
  "\n\020queueBindRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002"
  " \001(\t\022\025\n\rexchange_name\030\003 \001(\t\022\022\n\nqueue_nam"
  "e\030\004 \001(\t\022\023\n\013binding_key\030\005 \001(\t\"Y\n\022queueUnB"
  "indRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\025\n\r"
  "exchange_name\030\003 \001(\t\022\022\n\nqueue_name\030\004 \001(\t\""
  "\200\001\n\023basicPublishRequest\022\013\n\003rid\030\001 \001(\t\022\013\n\003"
  "cid\030\002 \001(\t\022\025\n\rexchange_name\030\003 \001(\t\022\014\n\004body"
  "\030\004 \001(\t\022*\n\nproperties\030\005 \001(\0132\026.bitmq.Basic"
  "Properties\"S\n\017basicAckRequest\022\013\n\003rid\030\001 \001"
  "(\t\022\013\n\003cid\030\002 \001(\t\022\022\n\nqueue_name\030\003 \001(\t\022\022\n\nm"
  "essage_id\030\004 \001(\t\"k\n\023basicConsumeRequest\022\013"
  "\n\003rid\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\024\n\014consumer_tag"
  "\030\003 \001(\t\022\022\n\nqueue_name\030\004 \001(\t\022\020\n\010auto_ack\030\005"
  " \001(\010\"X\n\022basicCancelRequest\022\013\n\003rid\030\001 \001(\t\022"
  "\013\n\003cid\030\002 \001(\t\022\024\n\014consumer_tag\030\003 \001(\t\022\022\n\nqu"
  "eue_name\030\004 \001(\t\"s\n\024basicConsumeResponse\022\013"
  "\n\003cid\030\001 \001(\t\022\024\n\014consumer_tag\030\002 \001(\t\022\014\n\004bod"
  "y\030\003 \001(\t\022*\n\nproperties\030\004 \001(\0132\026.bitmq.Basi"
  "cProperties\";\n\023basicCommonResponse\022\013\n\003ri"
  "d\030\001 \001(\t\022\013\n\003cid\030\002 \001(\t\022\n\n\002ok\030\003 \001(\010b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_mq_5fproto_2eproto_deps[1] = {
  &::descriptor_table_mq_5fmsg_2eproto,
};
static ::_pbi::once_flag descriptor_table_mq_5fproto_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mq_5fproto_2eproto = {
    false, false, 1560, descriptor_table_protodef_mq_5fproto_2eproto,
    "mq_proto.proto",
    &descriptor_table_mq_5fproto_2eproto_once, descriptor_table_mq_5fproto_2eproto_deps, 1, 16,
    schemas, file_default_instances, TableStruct_mq_5fproto_2eproto::offsets,
    file_level_metadata_mq_5fproto_2eproto, file_level_enum_descriptors_mq_5fproto_2eproto,
    file_level_service_descriptors_mq_5fproto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mq_5fproto_2eproto_getter() {
  return &descriptor_table_mq_5fproto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mq_5fproto_2eproto(&descriptor_table_mq_5fproto_2eproto);
namespace bitmq {

// ===================================================================

class openChannelRequest::_Internal {
 public:
};

openChannelRequest::openChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.openChannelRequest)
}
openChannelRequest::openChannelRequest(const openChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.openChannelRequest)
}

inline void openChannelRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

openChannelRequest::~openChannelRequest() {
  // @@protoc_insertion_point(destructor:bitmq.openChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void openChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rid_.Destroy();
  cid_.Destroy();
}

void openChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void openChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.openChannelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* openChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.openChannelRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.openChannelRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* openChannelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.openChannelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.openChannelRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.openChannelRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.openChannelRequest)
  return target;
}

size_t openChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.openChannelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData openChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    openChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*openChannelRequest::GetClassData() const { return &_class_data_; }

void openChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<openChannelRequest *>(to)->MergeFrom(
      static_cast<const openChannelRequest &>(from));
}


void openChannelRequest::MergeFrom(const openChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.openChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void openChannelRequest::CopyFrom(const openChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.openChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool openChannelRequest::IsInitialized() const {
  return true;
}

void openChannelRequest::InternalSwap(openChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata openChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[0]);
}

// ===================================================================

class closeChannelRequest::_Internal {
 public:
};

closeChannelRequest::closeChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.closeChannelRequest)
}
closeChannelRequest::closeChannelRequest(const closeChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.closeChannelRequest)
}

inline void closeChannelRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

closeChannelRequest::~closeChannelRequest() {
  // @@protoc_insertion_point(destructor:bitmq.closeChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void closeChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rid_.Destroy();
  cid_.Destroy();
}

void closeChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void closeChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.closeChannelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* closeChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.closeChannelRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.closeChannelRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* closeChannelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.closeChannelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.closeChannelRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.closeChannelRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.closeChannelRequest)
  return target;
}

size_t closeChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.closeChannelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData closeChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    closeChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*closeChannelRequest::GetClassData() const { return &_class_data_; }

void closeChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<closeChannelRequest *>(to)->MergeFrom(
      static_cast<const closeChannelRequest &>(from));
}


void closeChannelRequest::MergeFrom(const closeChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.closeChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void closeChannelRequest::CopyFrom(const closeChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.closeChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool closeChannelRequest::IsInitialized() const {
  return true;
}

void closeChannelRequest::InternalSwap(closeChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata closeChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[1]);
}

// ===================================================================

declareExchangeRequest_ArgsEntry_DoNotUse::declareExchangeRequest_ArgsEntry_DoNotUse() {}
declareExchangeRequest_ArgsEntry_DoNotUse::declareExchangeRequest_ArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void declareExchangeRequest_ArgsEntry_DoNotUse::MergeFrom(const declareExchangeRequest_ArgsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata declareExchangeRequest_ArgsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[2]);
}

// ===================================================================

class declareExchangeRequest::_Internal {
 public:
};

declareExchangeRequest::declareExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  args_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &declareExchangeRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:bitmq.declareExchangeRequest)
}
declareExchangeRequest::declareExchangeRequest(const declareExchangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  args_.MergeFrom(from.args_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  exchange_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exchange_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_name().empty()) {
    exchange_name_.Set(from._internal_exchange_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&exchange_type_, &from.exchange_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_delete_) -
    reinterpret_cast<char*>(&exchange_type_)) + sizeof(auto_delete_));
  // @@protoc_insertion_point(copy_constructor:bitmq.declareExchangeRequest)
}

inline void declareExchangeRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exchange_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exchange_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exchange_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auto_delete_) -
    reinterpret_cast<char*>(&exchange_type_)) + sizeof(auto_delete_));
}

declareExchangeRequest::~declareExchangeRequest() {
  // @@protoc_insertion_point(destructor:bitmq.declareExchangeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void declareExchangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  args_.Destruct();
  rid_.Destroy();
  cid_.Destroy();
  exchange_name_.Destroy();
}

void declareExchangeRequest::ArenaDtor(void* object) {
  declareExchangeRequest* _this = reinterpret_cast< declareExchangeRequest* >(object);
  _this->args_.Destruct();
}
void declareExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void declareExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.declareExchangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  exchange_name_.ClearToEmpty();
  ::memset(&exchange_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_delete_) -
      reinterpret_cast<char*>(&exchange_type_)) + sizeof(auto_delete_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* declareExchangeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.declareExchangeRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.declareExchangeRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      // string exchange_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_exchange_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.declareExchangeRequest.exchange_name"));
        } else
          goto handle_unusual;
        continue;
      // .bitmq.ExchangeType exchange_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_exchange_type(static_cast<::bitmq::ExchangeType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool durable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          durable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_delete = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          auto_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> args = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&args_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* declareExchangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.declareExchangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareExchangeRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareExchangeRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string exchange_name = 3;
  if (!this->_internal_exchange_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_name().data(), static_cast<int>(this->_internal_exchange_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareExchangeRequest.exchange_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exchange_name(), target);
  }

  // .bitmq.ExchangeType exchange_type = 4;
  if (this->_internal_exchange_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_exchange_type(), target);
  }

  // bool durable = 5;
  if (this->_internal_durable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_durable(), target);
  }

  // bool auto_delete = 6;
  if (this->_internal_auto_delete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_auto_delete(), target);
  }

  // map<string, string> args = 7;
  if (!this->_internal_args().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = declareExchangeRequest_ArgsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_args();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "bitmq.declareExchangeRequest.ArgsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "bitmq.declareExchangeRequest.ArgsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.declareExchangeRequest)
  return target;
}

size_t declareExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.declareExchangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> args = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_args_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_args().begin();
      it != this->_internal_args().end(); ++it) {
    total_size += declareExchangeRequest_ArgsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string exchange_name = 3;
  if (!this->_internal_exchange_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_name());
  }

  // .bitmq.ExchangeType exchange_type = 4;
  if (this->_internal_exchange_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_exchange_type());
  }

  // bool durable = 5;
  if (this->_internal_durable() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_delete = 6;
  if (this->_internal_auto_delete() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData declareExchangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    declareExchangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*declareExchangeRequest::GetClassData() const { return &_class_data_; }

void declareExchangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<declareExchangeRequest *>(to)->MergeFrom(
      static_cast<const declareExchangeRequest &>(from));
}


void declareExchangeRequest::MergeFrom(const declareExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.declareExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_exchange_name().empty()) {
    _internal_set_exchange_name(from._internal_exchange_name());
  }
  if (from._internal_exchange_type() != 0) {
    _internal_set_exchange_type(from._internal_exchange_type());
  }
  if (from._internal_durable() != 0) {
    _internal_set_durable(from._internal_durable());
  }
  if (from._internal_auto_delete() != 0) {
    _internal_set_auto_delete(from._internal_auto_delete());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void declareExchangeRequest::CopyFrom(const declareExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.declareExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool declareExchangeRequest::IsInitialized() const {
  return true;
}

void declareExchangeRequest::InternalSwap(declareExchangeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &exchange_name_, lhs_arena,
      &other->exchange_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(declareExchangeRequest, auto_delete_)
      + sizeof(declareExchangeRequest::auto_delete_)
      - PROTOBUF_FIELD_OFFSET(declareExchangeRequest, exchange_type_)>(
          reinterpret_cast<char*>(&exchange_type_),
          reinterpret_cast<char*>(&other->exchange_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata declareExchangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[3]);
}

// ===================================================================

class deleteExchangeRequest::_Internal {
 public:
};

deleteExchangeRequest::deleteExchangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.deleteExchangeRequest)
}
deleteExchangeRequest::deleteExchangeRequest(const deleteExchangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  exchange_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exchange_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_name().empty()) {
    exchange_name_.Set(from._internal_exchange_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.deleteExchangeRequest)
}

inline void deleteExchangeRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exchange_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exchange_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

deleteExchangeRequest::~deleteExchangeRequest() {
  // @@protoc_insertion_point(destructor:bitmq.deleteExchangeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void deleteExchangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rid_.Destroy();
  cid_.Destroy();
  exchange_name_.Destroy();
}

void deleteExchangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void deleteExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.deleteExchangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  exchange_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deleteExchangeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.deleteExchangeRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.deleteExchangeRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      // string exchange_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_exchange_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.deleteExchangeRequest.exchange_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* deleteExchangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.deleteExchangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteExchangeRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteExchangeRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string exchange_name = 3;
  if (!this->_internal_exchange_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_name().data(), static_cast<int>(this->_internal_exchange_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteExchangeRequest.exchange_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exchange_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.deleteExchangeRequest)
  return target;
}

size_t deleteExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.deleteExchangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string exchange_name = 3;
  if (!this->_internal_exchange_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData deleteExchangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    deleteExchangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*deleteExchangeRequest::GetClassData() const { return &_class_data_; }

void deleteExchangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<deleteExchangeRequest *>(to)->MergeFrom(
      static_cast<const deleteExchangeRequest &>(from));
}


void deleteExchangeRequest::MergeFrom(const deleteExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.deleteExchangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_exchange_name().empty()) {
    _internal_set_exchange_name(from._internal_exchange_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void deleteExchangeRequest::CopyFrom(const deleteExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.deleteExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteExchangeRequest::IsInitialized() const {
  return true;
}

void deleteExchangeRequest::InternalSwap(deleteExchangeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &exchange_name_, lhs_arena,
      &other->exchange_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata deleteExchangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[4]);
}

// ===================================================================

declareQueueRequest_ArgsEntry_DoNotUse::declareQueueRequest_ArgsEntry_DoNotUse() {}
declareQueueRequest_ArgsEntry_DoNotUse::declareQueueRequest_ArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void declareQueueRequest_ArgsEntry_DoNotUse::MergeFrom(const declareQueueRequest_ArgsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata declareQueueRequest_ArgsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[5]);
}

// ===================================================================

class declareQueueRequest::_Internal {
 public:
};

declareQueueRequest::declareQueueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  args_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &declareQueueRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:bitmq.declareQueueRequest)
}
declareQueueRequest::declareQueueRequest(const declareQueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  args_.MergeFrom(from.args_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  queue_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    queue_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_queue_name().empty()) {
    queue_name_.Set(from._internal_queue_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&exclusive_, &from.exclusive_,
    static_cast<size_t>(reinterpret_cast<char*>(&auto_delete_) -
    reinterpret_cast<char*>(&exclusive_)) + sizeof(auto_delete_));
  // @@protoc_insertion_point(copy_constructor:bitmq.declareQueueRequest)
}

inline void declareQueueRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
queue_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  queue_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exclusive_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auto_delete_) -
    reinterpret_cast<char*>(&exclusive_)) + sizeof(auto_delete_));
}

declareQueueRequest::~declareQueueRequest() {
  // @@protoc_insertion_point(destructor:bitmq.declareQueueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void declareQueueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  args_.Destruct();
  rid_.Destroy();
  cid_.Destroy();
  queue_name_.Destroy();
}

void declareQueueRequest::ArenaDtor(void* object) {
  declareQueueRequest* _this = reinterpret_cast< declareQueueRequest* >(object);
  _this->args_.Destruct();
}
void declareQueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void declareQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.declareQueueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  queue_name_.ClearToEmpty();
  ::memset(&exclusive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_delete_) -
      reinterpret_cast<char*>(&exclusive_)) + sizeof(auto_delete_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* declareQueueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.declareQueueRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.declareQueueRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      // string queue_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.declareQueueRequest.queue_name"));
        } else
          goto handle_unusual;
        continue;
      // bool exclusive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          exclusive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool durable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          durable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_delete = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          auto_delete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> args = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&args_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* declareQueueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.declareQueueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareQueueRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareQueueRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string queue_name = 3;
  if (!this->_internal_queue_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.declareQueueRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_queue_name(), target);
  }

  // bool exclusive = 4;
  if (this->_internal_exclusive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_exclusive(), target);
  }

  // bool durable = 5;
  if (this->_internal_durable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_durable(), target);
  }

  // bool auto_delete = 6;
  if (this->_internal_auto_delete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_auto_delete(), target);
  }

  // map<string, string> args = 7;
  if (!this->_internal_args().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = declareQueueRequest_ArgsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_args();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "bitmq.declareQueueRequest.ArgsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "bitmq.declareQueueRequest.ArgsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.declareQueueRequest)
  return target;
}

size_t declareQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.declareQueueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> args = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_args_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_args().begin();
      it != this->_internal_args().end(); ++it) {
    total_size += declareQueueRequest_ArgsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string queue_name = 3;
  if (!this->_internal_queue_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // bool exclusive = 4;
  if (this->_internal_exclusive() != 0) {
    total_size += 1 + 1;
  }

  // bool durable = 5;
  if (this->_internal_durable() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_delete = 6;
  if (this->_internal_auto_delete() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData declareQueueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    declareQueueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*declareQueueRequest::GetClassData() const { return &_class_data_; }

void declareQueueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<declareQueueRequest *>(to)->MergeFrom(
      static_cast<const declareQueueRequest &>(from));
}


void declareQueueRequest::MergeFrom(const declareQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.declareQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_queue_name().empty()) {
    _internal_set_queue_name(from._internal_queue_name());
  }
  if (from._internal_exclusive() != 0) {
    _internal_set_exclusive(from._internal_exclusive());
  }
  if (from._internal_durable() != 0) {
    _internal_set_durable(from._internal_durable());
  }
  if (from._internal_auto_delete() != 0) {
    _internal_set_auto_delete(from._internal_auto_delete());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void declareQueueRequest::CopyFrom(const declareQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.declareQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool declareQueueRequest::IsInitialized() const {
  return true;
}

void declareQueueRequest::InternalSwap(declareQueueRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &queue_name_, lhs_arena,
      &other->queue_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(declareQueueRequest, auto_delete_)
      + sizeof(declareQueueRequest::auto_delete_)
      - PROTOBUF_FIELD_OFFSET(declareQueueRequest, exclusive_)>(
          reinterpret_cast<char*>(&exclusive_),
          reinterpret_cast<char*>(&other->exclusive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata declareQueueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[6]);
}

// ===================================================================

class deleteQueueRequest::_Internal {
 public:
};

deleteQueueRequest::deleteQueueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.deleteQueueRequest)
}
deleteQueueRequest::deleteQueueRequest(const deleteQueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  queue_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    queue_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_queue_name().empty()) {
    queue_name_.Set(from._internal_queue_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.deleteQueueRequest)
}

inline void deleteQueueRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
queue_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  queue_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

deleteQueueRequest::~deleteQueueRequest() {
  // @@protoc_insertion_point(destructor:bitmq.deleteQueueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void deleteQueueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rid_.Destroy();
  cid_.Destroy();
  queue_name_.Destroy();
}

void deleteQueueRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void deleteQueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.deleteQueueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  queue_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* deleteQueueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.deleteQueueRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.deleteQueueRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      // string queue_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.deleteQueueRequest.queue_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* deleteQueueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.deleteQueueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteQueueRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteQueueRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string queue_name = 3;
  if (!this->_internal_queue_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.deleteQueueRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_queue_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.deleteQueueRequest)
  return target;
}

size_t deleteQueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.deleteQueueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string queue_name = 3;
  if (!this->_internal_queue_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData deleteQueueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    deleteQueueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*deleteQueueRequest::GetClassData() const { return &_class_data_; }

void deleteQueueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<deleteQueueRequest *>(to)->MergeFrom(
      static_cast<const deleteQueueRequest &>(from));
}


void deleteQueueRequest::MergeFrom(const deleteQueueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.deleteQueueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_queue_name().empty()) {
    _internal_set_queue_name(from._internal_queue_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void deleteQueueRequest::CopyFrom(const deleteQueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.deleteQueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool deleteQueueRequest::IsInitialized() const {
  return true;
}

void deleteQueueRequest::InternalSwap(deleteQueueRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &queue_name_, lhs_arena,
      &other->queue_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata deleteQueueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[7]);
}

// ===================================================================

class queueBindRequest::_Internal {
 public:
};

queueBindRequest::queueBindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.queueBindRequest)
}
queueBindRequest::queueBindRequest(const queueBindRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  exchange_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exchange_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_name().empty()) {
    exchange_name_.Set(from._internal_exchange_name(), 
      GetArenaForAllocation());
  }
  queue_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    queue_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_queue_name().empty()) {
    queue_name_.Set(from._internal_queue_name(), 
      GetArenaForAllocation());
  }
  binding_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    binding_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_binding_key().empty()) {
    binding_key_.Set(from._internal_binding_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.queueBindRequest)
}

inline void queueBindRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exchange_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exchange_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
queue_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  queue_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
binding_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  binding_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

queueBindRequest::~queueBindRequest() {
  // @@protoc_insertion_point(destructor:bitmq.queueBindRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void queueBindRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rid_.Destroy();
  cid_.Destroy();
  exchange_name_.Destroy();
  queue_name_.Destroy();
  binding_key_.Destroy();
}

void queueBindRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void queueBindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.queueBindRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  exchange_name_.ClearToEmpty();
  queue_name_.ClearToEmpty();
  binding_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queueBindRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.queueBindRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.queueBindRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      // string exchange_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_exchange_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.queueBindRequest.exchange_name"));
        } else
          goto handle_unusual;
        continue;
      // string queue_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.queueBindRequest.queue_name"));
        } else
          goto handle_unusual;
        continue;
      // string binding_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_binding_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.queueBindRequest.binding_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queueBindRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.queueBindRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string exchange_name = 3;
  if (!this->_internal_exchange_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_name().data(), static_cast<int>(this->_internal_exchange_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.exchange_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exchange_name(), target);
  }

  // string queue_name = 4;
  if (!this->_internal_queue_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_queue_name(), target);
  }

  // string binding_key = 5;
  if (!this->_internal_binding_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_binding_key().data(), static_cast<int>(this->_internal_binding_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueBindRequest.binding_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_binding_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.queueBindRequest)
  return target;
}

size_t queueBindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.queueBindRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string exchange_name = 3;
  if (!this->_internal_exchange_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_name());
  }

  // string queue_name = 4;
  if (!this->_internal_queue_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // string binding_key = 5;
  if (!this->_internal_binding_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_binding_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queueBindRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    queueBindRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queueBindRequest::GetClassData() const { return &_class_data_; }

void queueBindRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<queueBindRequest *>(to)->MergeFrom(
      static_cast<const queueBindRequest &>(from));
}


void queueBindRequest::MergeFrom(const queueBindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.queueBindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_exchange_name().empty()) {
    _internal_set_exchange_name(from._internal_exchange_name());
  }
  if (!from._internal_queue_name().empty()) {
    _internal_set_queue_name(from._internal_queue_name());
  }
  if (!from._internal_binding_key().empty()) {
    _internal_set_binding_key(from._internal_binding_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queueBindRequest::CopyFrom(const queueBindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.queueBindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queueBindRequest::IsInitialized() const {
  return true;
}

void queueBindRequest::InternalSwap(queueBindRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &exchange_name_, lhs_arena,
      &other->exchange_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &queue_name_, lhs_arena,
      &other->queue_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &binding_key_, lhs_arena,
      &other->binding_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata queueBindRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[8]);
}

// ===================================================================

class queueUnBindRequest::_Internal {
 public:
};

queueUnBindRequest::queueUnBindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.queueUnBindRequest)
}
queueUnBindRequest::queueUnBindRequest(const queueUnBindRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  exchange_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exchange_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_name().empty()) {
    exchange_name_.Set(from._internal_exchange_name(), 
      GetArenaForAllocation());
  }
  queue_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    queue_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_queue_name().empty()) {
    queue_name_.Set(from._internal_queue_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.queueUnBindRequest)
}

inline void queueUnBindRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exchange_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exchange_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
queue_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  queue_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

queueUnBindRequest::~queueUnBindRequest() {
  // @@protoc_insertion_point(destructor:bitmq.queueUnBindRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void queueUnBindRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rid_.Destroy();
  cid_.Destroy();
  exchange_name_.Destroy();
  queue_name_.Destroy();
}

void queueUnBindRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void queueUnBindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.queueUnBindRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  exchange_name_.ClearToEmpty();
  queue_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* queueUnBindRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.queueUnBindRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.queueUnBindRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      // string exchange_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_exchange_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.queueUnBindRequest.exchange_name"));
        } else
          goto handle_unusual;
        continue;
      // string queue_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.queueUnBindRequest.queue_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* queueUnBindRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.queueUnBindRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string exchange_name = 3;
  if (!this->_internal_exchange_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_name().data(), static_cast<int>(this->_internal_exchange_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.exchange_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exchange_name(), target);
  }

  // string queue_name = 4;
  if (!this->_internal_queue_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.queueUnBindRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_queue_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.queueUnBindRequest)
  return target;
}

size_t queueUnBindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.queueUnBindRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string exchange_name = 3;
  if (!this->_internal_exchange_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_name());
  }

  // string queue_name = 4;
  if (!this->_internal_queue_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData queueUnBindRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    queueUnBindRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*queueUnBindRequest::GetClassData() const { return &_class_data_; }

void queueUnBindRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<queueUnBindRequest *>(to)->MergeFrom(
      static_cast<const queueUnBindRequest &>(from));
}


void queueUnBindRequest::MergeFrom(const queueUnBindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.queueUnBindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_exchange_name().empty()) {
    _internal_set_exchange_name(from._internal_exchange_name());
  }
  if (!from._internal_queue_name().empty()) {
    _internal_set_queue_name(from._internal_queue_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void queueUnBindRequest::CopyFrom(const queueUnBindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.queueUnBindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queueUnBindRequest::IsInitialized() const {
  return true;
}

void queueUnBindRequest::InternalSwap(queueUnBindRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &exchange_name_, lhs_arena,
      &other->exchange_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &queue_name_, lhs_arena,
      &other->queue_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata queueUnBindRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[9]);
}

// ===================================================================

class basicPublishRequest::_Internal {
 public:
  static const ::bitmq::BasicProperties& properties(const basicPublishRequest* msg);
};

const ::bitmq::BasicProperties&
basicPublishRequest::_Internal::properties(const basicPublishRequest* msg) {
  return *msg->properties_;
}
void basicPublishRequest::clear_properties() {
  if (GetArenaForAllocation() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
basicPublishRequest::basicPublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.basicPublishRequest)
}
basicPublishRequest::basicPublishRequest(const basicPublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  exchange_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exchange_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_name().empty()) {
    exchange_name_.Set(from._internal_exchange_name(), 
      GetArenaForAllocation());
  }
  body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    body_.Set(from._internal_body(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_properties()) {
    properties_ = new ::bitmq::BasicProperties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.basicPublishRequest)
}

inline void basicPublishRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exchange_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exchange_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
body_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
properties_ = nullptr;
}

basicPublishRequest::~basicPublishRequest() {
  // @@protoc_insertion_point(destructor:bitmq.basicPublishRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void basicPublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rid_.Destroy();
  cid_.Destroy();
  exchange_name_.Destroy();
  body_.Destroy();
  if (this != internal_default_instance()) delete properties_;
}

void basicPublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void basicPublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicPublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  exchange_name_.ClearToEmpty();
  body_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* basicPublishRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicPublishRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicPublishRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      // string exchange_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_exchange_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicPublishRequest.exchange_name"));
        } else
          goto handle_unusual;
        continue;
      // string body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicPublishRequest.body"));
        } else
          goto handle_unusual;
        continue;
      // .bitmq.BasicProperties properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* basicPublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicPublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string exchange_name = 3;
  if (!this->_internal_exchange_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_name().data(), static_cast<int>(this->_internal_exchange_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.exchange_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exchange_name(), target);
  }

  // string body = 4;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicPublishRequest.body");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_body(), target);
  }

  // .bitmq.BasicProperties properties = 5;
  if (this->_internal_has_properties()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::properties(this),
        _Internal::properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicPublishRequest)
  return target;
}

size_t basicPublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicPublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string exchange_name = 3;
  if (!this->_internal_exchange_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_name());
  }

  // string body = 4;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // .bitmq.BasicProperties properties = 5;
  if (this->_internal_has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData basicPublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    basicPublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*basicPublishRequest::GetClassData() const { return &_class_data_; }

void basicPublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<basicPublishRequest *>(to)->MergeFrom(
      static_cast<const basicPublishRequest &>(from));
}


void basicPublishRequest::MergeFrom(const basicPublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicPublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_exchange_name().empty()) {
    _internal_set_exchange_name(from._internal_exchange_name());
  }
  if (!from._internal_body().empty()) {
    _internal_set_body(from._internal_body());
  }
  if (from._internal_has_properties()) {
    _internal_mutable_properties()->::bitmq::BasicProperties::MergeFrom(from._internal_properties());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void basicPublishRequest::CopyFrom(const basicPublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicPublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicPublishRequest::IsInitialized() const {
  return true;
}

void basicPublishRequest::InternalSwap(basicPublishRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &exchange_name_, lhs_arena,
      &other->exchange_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  swap(properties_, other->properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata basicPublishRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[10]);
}

// ===================================================================

class basicAckRequest::_Internal {
 public:
};

basicAckRequest::basicAckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.basicAckRequest)
}
basicAckRequest::basicAckRequest(const basicAckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  queue_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    queue_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_queue_name().empty()) {
    queue_name_.Set(from._internal_queue_name(), 
      GetArenaForAllocation());
  }
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.basicAckRequest)
}

inline void basicAckRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
queue_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  queue_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

basicAckRequest::~basicAckRequest() {
  // @@protoc_insertion_point(destructor:bitmq.basicAckRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void basicAckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rid_.Destroy();
  cid_.Destroy();
  queue_name_.Destroy();
  message_id_.Destroy();
}

void basicAckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void basicAckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicAckRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  queue_name_.ClearToEmpty();
  message_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* basicAckRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicAckRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicAckRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      // string queue_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicAckRequest.queue_name"));
        } else
          goto handle_unusual;
        continue;
      // string message_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicAckRequest.message_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* basicAckRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicAckRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string queue_name = 3;
  if (!this->_internal_queue_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_queue_name(), target);
  }

  // string message_id = 4;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicAckRequest.message_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicAckRequest)
  return target;
}

size_t basicAckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicAckRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string queue_name = 3;
  if (!this->_internal_queue_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // string message_id = 4;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData basicAckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    basicAckRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*basicAckRequest::GetClassData() const { return &_class_data_; }

void basicAckRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<basicAckRequest *>(to)->MergeFrom(
      static_cast<const basicAckRequest &>(from));
}


void basicAckRequest::MergeFrom(const basicAckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicAckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_queue_name().empty()) {
    _internal_set_queue_name(from._internal_queue_name());
  }
  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void basicAckRequest::CopyFrom(const basicAckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicAckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicAckRequest::IsInitialized() const {
  return true;
}

void basicAckRequest::InternalSwap(basicAckRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &queue_name_, lhs_arena,
      &other->queue_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata basicAckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[11]);
}

// ===================================================================

class basicConsumeRequest::_Internal {
 public:
};

basicConsumeRequest::basicConsumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.basicConsumeRequest)
}
basicConsumeRequest::basicConsumeRequest(const basicConsumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  consumer_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    consumer_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consumer_tag().empty()) {
    consumer_tag_.Set(from._internal_consumer_tag(), 
      GetArenaForAllocation());
  }
  queue_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    queue_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_queue_name().empty()) {
    queue_name_.Set(from._internal_queue_name(), 
      GetArenaForAllocation());
  }
  auto_ack_ = from.auto_ack_;
  // @@protoc_insertion_point(copy_constructor:bitmq.basicConsumeRequest)
}

inline void basicConsumeRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
consumer_tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  consumer_tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
queue_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  queue_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
auto_ack_ = false;
}

basicConsumeRequest::~basicConsumeRequest() {
  // @@protoc_insertion_point(destructor:bitmq.basicConsumeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void basicConsumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rid_.Destroy();
  cid_.Destroy();
  consumer_tag_.Destroy();
  queue_name_.Destroy();
}

void basicConsumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void basicConsumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicConsumeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  consumer_tag_.ClearToEmpty();
  queue_name_.ClearToEmpty();
  auto_ack_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* basicConsumeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicConsumeRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicConsumeRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      // string consumer_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_consumer_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicConsumeRequest.consumer_tag"));
        } else
          goto handle_unusual;
        continue;
      // string queue_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicConsumeRequest.queue_name"));
        } else
          goto handle_unusual;
        continue;
      // bool auto_ack = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          auto_ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* basicConsumeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicConsumeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string consumer_tag = 3;
  if (!this->_internal_consumer_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumer_tag().data(), static_cast<int>(this->_internal_consumer_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.consumer_tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_consumer_tag(), target);
  }

  // string queue_name = 4;
  if (!this->_internal_queue_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_queue_name(), target);
  }

  // bool auto_ack = 5;
  if (this->_internal_auto_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_auto_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicConsumeRequest)
  return target;
}

size_t basicConsumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicConsumeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string consumer_tag = 3;
  if (!this->_internal_consumer_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consumer_tag());
  }

  // string queue_name = 4;
  if (!this->_internal_queue_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  // bool auto_ack = 5;
  if (this->_internal_auto_ack() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData basicConsumeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    basicConsumeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*basicConsumeRequest::GetClassData() const { return &_class_data_; }

void basicConsumeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<basicConsumeRequest *>(to)->MergeFrom(
      static_cast<const basicConsumeRequest &>(from));
}


void basicConsumeRequest::MergeFrom(const basicConsumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicConsumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_consumer_tag().empty()) {
    _internal_set_consumer_tag(from._internal_consumer_tag());
  }
  if (!from._internal_queue_name().empty()) {
    _internal_set_queue_name(from._internal_queue_name());
  }
  if (from._internal_auto_ack() != 0) {
    _internal_set_auto_ack(from._internal_auto_ack());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void basicConsumeRequest::CopyFrom(const basicConsumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicConsumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicConsumeRequest::IsInitialized() const {
  return true;
}

void basicConsumeRequest::InternalSwap(basicConsumeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &consumer_tag_, lhs_arena,
      &other->consumer_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &queue_name_, lhs_arena,
      &other->queue_name_, rhs_arena
  );
  swap(auto_ack_, other->auto_ack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata basicConsumeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[12]);
}

// ===================================================================

class basicCancelRequest::_Internal {
 public:
};

basicCancelRequest::basicCancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.basicCancelRequest)
}
basicCancelRequest::basicCancelRequest(const basicCancelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  consumer_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    consumer_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consumer_tag().empty()) {
    consumer_tag_.Set(from._internal_consumer_tag(), 
      GetArenaForAllocation());
  }
  queue_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    queue_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_queue_name().empty()) {
    queue_name_.Set(from._internal_queue_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.basicCancelRequest)
}

inline void basicCancelRequest::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
consumer_tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  consumer_tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
queue_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  queue_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

basicCancelRequest::~basicCancelRequest() {
  // @@protoc_insertion_point(destructor:bitmq.basicCancelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void basicCancelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rid_.Destroy();
  cid_.Destroy();
  consumer_tag_.Destroy();
  queue_name_.Destroy();
}

void basicCancelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void basicCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicCancelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  consumer_tag_.ClearToEmpty();
  queue_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* basicCancelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicCancelRequest.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicCancelRequest.cid"));
        } else
          goto handle_unusual;
        continue;
      // string consumer_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_consumer_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicCancelRequest.consumer_tag"));
        } else
          goto handle_unusual;
        continue;
      // string queue_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_queue_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicCancelRequest.queue_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* basicCancelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicCancelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // string consumer_tag = 3;
  if (!this->_internal_consumer_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumer_tag().data(), static_cast<int>(this->_internal_consumer_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.consumer_tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_consumer_tag(), target);
  }

  // string queue_name = 4;
  if (!this->_internal_queue_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue_name().data(), static_cast<int>(this->_internal_queue_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCancelRequest.queue_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_queue_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicCancelRequest)
  return target;
}

size_t basicCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicCancelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string consumer_tag = 3;
  if (!this->_internal_consumer_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consumer_tag());
  }

  // string queue_name = 4;
  if (!this->_internal_queue_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData basicCancelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    basicCancelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*basicCancelRequest::GetClassData() const { return &_class_data_; }

void basicCancelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<basicCancelRequest *>(to)->MergeFrom(
      static_cast<const basicCancelRequest &>(from));
}


void basicCancelRequest::MergeFrom(const basicCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_consumer_tag().empty()) {
    _internal_set_consumer_tag(from._internal_consumer_tag());
  }
  if (!from._internal_queue_name().empty()) {
    _internal_set_queue_name(from._internal_queue_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void basicCancelRequest::CopyFrom(const basicCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicCancelRequest::IsInitialized() const {
  return true;
}

void basicCancelRequest::InternalSwap(basicCancelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &consumer_tag_, lhs_arena,
      &other->consumer_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &queue_name_, lhs_arena,
      &other->queue_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata basicCancelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[13]);
}

// ===================================================================

class basicConsumeResponse::_Internal {
 public:
  static const ::bitmq::BasicProperties& properties(const basicConsumeResponse* msg);
};

const ::bitmq::BasicProperties&
basicConsumeResponse::_Internal::properties(const basicConsumeResponse* msg) {
  return *msg->properties_;
}
void basicConsumeResponse::clear_properties() {
  if (GetArenaForAllocation() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
}
basicConsumeResponse::basicConsumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.basicConsumeResponse)
}
basicConsumeResponse::basicConsumeResponse(const basicConsumeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  consumer_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    consumer_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consumer_tag().empty()) {
    consumer_tag_.Set(from._internal_consumer_tag(), 
      GetArenaForAllocation());
  }
  body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    body_.Set(from._internal_body(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_properties()) {
    properties_ = new ::bitmq::BasicProperties(*from.properties_);
  } else {
    properties_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bitmq.basicConsumeResponse)
}

inline void basicConsumeResponse::SharedCtor() {
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
consumer_tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  consumer_tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
body_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
properties_ = nullptr;
}

basicConsumeResponse::~basicConsumeResponse() {
  // @@protoc_insertion_point(destructor:bitmq.basicConsumeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void basicConsumeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cid_.Destroy();
  consumer_tag_.Destroy();
  body_.Destroy();
  if (this != internal_default_instance()) delete properties_;
}

void basicConsumeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void basicConsumeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicConsumeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_.ClearToEmpty();
  consumer_tag_.ClearToEmpty();
  body_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && properties_ != nullptr) {
    delete properties_;
  }
  properties_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* basicConsumeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicConsumeResponse.cid"));
        } else
          goto handle_unusual;
        continue;
      // string consumer_tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_consumer_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicConsumeResponse.consumer_tag"));
        } else
          goto handle_unusual;
        continue;
      // string body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicConsumeResponse.body"));
        } else
          goto handle_unusual;
        continue;
      // .bitmq.BasicProperties properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* basicConsumeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicConsumeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cid = 1;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeResponse.cid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cid(), target);
  }

  // string consumer_tag = 2;
  if (!this->_internal_consumer_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumer_tag().data(), static_cast<int>(this->_internal_consumer_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeResponse.consumer_tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_consumer_tag(), target);
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicConsumeResponse.body");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_body(), target);
  }

  // .bitmq.BasicProperties properties = 4;
  if (this->_internal_has_properties()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::properties(this),
        _Internal::properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicConsumeResponse)
  return target;
}

size_t basicConsumeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicConsumeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cid = 1;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // string consumer_tag = 2;
  if (!this->_internal_consumer_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consumer_tag());
  }

  // string body = 3;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // .bitmq.BasicProperties properties = 4;
  if (this->_internal_has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *properties_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData basicConsumeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    basicConsumeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*basicConsumeResponse::GetClassData() const { return &_class_data_; }

void basicConsumeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<basicConsumeResponse *>(to)->MergeFrom(
      static_cast<const basicConsumeResponse &>(from));
}


void basicConsumeResponse::MergeFrom(const basicConsumeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicConsumeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (!from._internal_consumer_tag().empty()) {
    _internal_set_consumer_tag(from._internal_consumer_tag());
  }
  if (!from._internal_body().empty()) {
    _internal_set_body(from._internal_body());
  }
  if (from._internal_has_properties()) {
    _internal_mutable_properties()->::bitmq::BasicProperties::MergeFrom(from._internal_properties());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void basicConsumeResponse::CopyFrom(const basicConsumeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicConsumeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicConsumeResponse::IsInitialized() const {
  return true;
}

void basicConsumeResponse::InternalSwap(basicConsumeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &consumer_tag_, lhs_arena,
      &other->consumer_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  swap(properties_, other->properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata basicConsumeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[14]);
}

// ===================================================================

class basicCommonResponse::_Internal {
 public:
};

basicCommonResponse::basicCommonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:bitmq.basicCommonResponse)
}
basicCommonResponse::basicCommonResponse(const basicCommonResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rid().empty()) {
    rid_.Set(from._internal_rid(), 
      GetArenaForAllocation());
  }
  cid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cid().empty()) {
    cid_.Set(from._internal_cid(), 
      GetArenaForAllocation());
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:bitmq.basicCommonResponse)
}

inline void basicCommonResponse::SharedCtor() {
rid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ok_ = false;
}

basicCommonResponse::~basicCommonResponse() {
  // @@protoc_insertion_point(destructor:bitmq.basicCommonResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void basicCommonResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rid_.Destroy();
  cid_.Destroy();
}

void basicCommonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void basicCommonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bitmq.basicCommonResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rid_.ClearToEmpty();
  cid_.ClearToEmpty();
  ok_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* basicCommonResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string rid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_rid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicCommonResponse.rid"));
        } else
          goto handle_unusual;
        continue;
      // string cid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bitmq.basicCommonResponse.cid"));
        } else
          goto handle_unusual;
        continue;
      // bool ok = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* basicCommonResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bitmq.basicCommonResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rid().data(), static_cast<int>(this->_internal_rid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCommonResponse.rid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rid(), target);
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cid().data(), static_cast<int>(this->_internal_cid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bitmq.basicCommonResponse.cid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cid(), target);
  }

  // bool ok = 3;
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bitmq.basicCommonResponse)
  return target;
}

size_t basicCommonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bitmq.basicCommonResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rid = 1;
  if (!this->_internal_rid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rid());
  }

  // string cid = 2;
  if (!this->_internal_cid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cid());
  }

  // bool ok = 3;
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData basicCommonResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    basicCommonResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*basicCommonResponse::GetClassData() const { return &_class_data_; }

void basicCommonResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<basicCommonResponse *>(to)->MergeFrom(
      static_cast<const basicCommonResponse &>(from));
}


void basicCommonResponse::MergeFrom(const basicCommonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bitmq.basicCommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_rid().empty()) {
    _internal_set_rid(from._internal_rid());
  }
  if (!from._internal_cid().empty()) {
    _internal_set_cid(from._internal_cid());
  }
  if (from._internal_ok() != 0) {
    _internal_set_ok(from._internal_ok());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void basicCommonResponse::CopyFrom(const basicCommonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bitmq.basicCommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool basicCommonResponse::IsInitialized() const {
  return true;
}

void basicCommonResponse::InternalSwap(basicCommonResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rid_, lhs_arena,
      &other->rid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cid_, lhs_arena,
      &other->cid_, rhs_arena
  );
  swap(ok_, other->ok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata basicCommonResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mq_5fproto_2eproto_getter, &descriptor_table_mq_5fproto_2eproto_once,
      file_level_metadata_mq_5fproto_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bitmq
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bitmq::openChannelRequest*
Arena::CreateMaybeMessage< ::bitmq::openChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::openChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::closeChannelRequest*
Arena::CreateMaybeMessage< ::bitmq::closeChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::closeChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::declareExchangeRequest_ArgsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::bitmq::declareExchangeRequest_ArgsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::declareExchangeRequest_ArgsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::declareExchangeRequest*
Arena::CreateMaybeMessage< ::bitmq::declareExchangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::declareExchangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::deleteExchangeRequest*
Arena::CreateMaybeMessage< ::bitmq::deleteExchangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::deleteExchangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::declareQueueRequest_ArgsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::bitmq::declareQueueRequest_ArgsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::declareQueueRequest_ArgsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::declareQueueRequest*
Arena::CreateMaybeMessage< ::bitmq::declareQueueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::declareQueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::deleteQueueRequest*
Arena::CreateMaybeMessage< ::bitmq::deleteQueueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::deleteQueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::queueBindRequest*
Arena::CreateMaybeMessage< ::bitmq::queueBindRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::queueBindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::queueUnBindRequest*
Arena::CreateMaybeMessage< ::bitmq::queueUnBindRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::queueUnBindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::basicPublishRequest*
Arena::CreateMaybeMessage< ::bitmq::basicPublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::basicPublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::basicAckRequest*
Arena::CreateMaybeMessage< ::bitmq::basicAckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::basicAckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::basicConsumeRequest*
Arena::CreateMaybeMessage< ::bitmq::basicConsumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::basicConsumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::basicCancelRequest*
Arena::CreateMaybeMessage< ::bitmq::basicCancelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::basicCancelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::basicConsumeResponse*
Arena::CreateMaybeMessage< ::bitmq::basicConsumeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::basicConsumeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bitmq::basicCommonResponse*
Arena::CreateMaybeMessage< ::bitmq::basicCommonResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bitmq::basicCommonResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
